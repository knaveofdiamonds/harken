module Harken

grammar Message
  rule message
    expression {
      def interpret(vars=[])
        regex = Regexp.compile("^" + elements.map {|e| e.interpret(vars) }.join + "$")

	eigenclass = (class << regex; self; end)
	eigenclass.send(:define_method, :variables) do
 	  vars
 	end

	eigenclass.send(:define_method, :match) do
	  match = super
	  return if match.nil?
	  vars.each_with_index do |sym, i|
	    match.instance_eval "def #{sym}\n captures[#{i}]\n end"
	  end
	  match
	end

	regex
      end
    }
  end

  rule expression
    (word / whitespace / identifier / optional)+
  end

  # whitespace before optionals will be dealt with separately
  rule whitespace
    " "+ !"[" {
      def interpret(vars=[])
        "\\ +"
      end
    }
  end

  rule word
    [^><\[\] ]+ {
      def interpret(vars=[])
        Regexp.escape(text_value)
      end
    }
  end

  rule identifier
    '<' identifier_value '>'
  end

  rule identifier_value
    [a-zA-Z_] [a-zA-Z_0-9 ]* {
      def interpret(vars=[])
        vars << text_value.to_sym
        "(.+?)"
      end
    }
  end  

  rule optional
    open_optional expression close_optional
  end

  rule open_optional
    " "* "[" {
      def interpret(vars=[])
        optional_left_space = (text_value.length != text_value.lstrip.length) ? "\\ +" : ""
        "(?:" + optional_left_space
      end
    }
  end

  rule close_optional
    "]" " "+ !"[" {
      def interpret(vars=[])
        " +)?"
      end
    }
    /
    "]" {
      def interpret(vars=[])
        ")?"
      end
    }
  end
end

end